import numpy as np 
import pandas as pd 
df=pd.read_csv("/content/drive/MyDrive/StudentsPerformance (1).csv") // importing dataset
df.head()
df.tail()
df.shape
df.columns
print(df[df.duplicated()]) // checking duplicate values

df.info() // data information
df.describe()

df.isnull().any() //checking null values
df.isnull().sum()

********************** percentage calculation*******************

df['Percentage']= round(((df['math score']+df['reading score']+df['writing score'])/300)*100,2) 
df.head()

df = pd.get_dummies(df)   ///dummy values
df

*********************Predicting writing score********************

X = df.drop(["writing score"], axis = 1).values
y = df[["writing score"]].values

*********************Predicting math score*******************

X = df.drop(["math score"], axis = 1).values
y = df[["math score"]].values

***********************Predicting reading score**************

X = df.drop(["reading score"], axis = 1).values
y = df[["reading score"]].values

***********************Splitting data************************

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0, test_size = 0.25)


************************* Machine Learning Algorithms**********************

////////////////LinearRegression/////////////////


X = df.drop(['math score', 'reading score', 'writing score'],axis=1)
y = df[['math score', 'reading score', 'writing score']]


from sklearn.linear_model import LinearRegression
lr= LinearRegression()
lr.fit(X_train, y_train)
pred = lr.predict(X_test)

y_pred = lr.predict(X_test)
print('Accuracy of linear regression classifier on test set: {:.2f}'.format(lr.score(X_test, y_test)))


////////////////////////////LogisticRegression/////////////////

from sklearn.linear_model import LogisticRegression
a=LogisticRegression()
a.fit(X_train, y_train)
pred = a.predict(X_test)

y_pred = a.predict(X_test)
print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(lr.score(X_test, y_test)))

/////////////////////svm/////////////

from sklearn import svm
clf = svm.SVC(kernel='linear') # Linear Kernel

#Train the model using the training sets
clf.fit(X_train, y_train)

#Predict the response for test dataset
y_pred = clf.predict(X_test)
y_pred = clf.predict(X_test)
print('Accuracy of svm on test set: {:.2f}'.format(lr.score(X_test, y_test)))



VISUALIZATION

import numpy as np 
import pandas as pd 
import seaborn as sns
import matplotlib.pyplot as plt

import plotly.io as pio
import plotly.express as px
import plotly.graph_objects as go
import plotly.figure_factory as ff
from plotly.subplots import make_subplots
from plotly.validators.scatter.marker import SymbolValidator
import plotly.offline as pyo

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import mean_squared_error


*****************************DATA ANALYSIS(*******************

df.rename(columns={"race/ethnicity":"ethnicity","parental level of education":"parent_education"
                    ,"math score":"math","reading score":"reading","writing score":"writing",
                    "test preparation course":"pre"},inplace=True)
df.head()

//////////////GENDER/////////////

fig, ax = plt.subplots()
fig.subplots_adjust(hspace=0.8, wspace=0.8, left = 0.2, right = 1.5)
for idx in range(3):
    plt.subplot(1,3, idx+1)
    gender_df = df.groupby("gender")[list(df.columns[-3:])[idx]].describe()
    sns.barplot(gender_df.index, gender_df.loc[:,"mean"].values)
    plt.ylabel("score")
    plt.title(list(df.columns[-3:])[idx])
    
plt.show()


/////////////score distribution///////////////

fig , axes = plt.subplots(2,3, figsize=(20,10))
sns.histplot(df[df['gender'] =='male']['math'],kde=True,ax = axes[0][0],color='green')
sns.histplot(df[df['gender'] =='female']['math'],kde=True,ax= axes[1][0],color='blue')
sns.histplot(df[df['gender'] =='male']['reading'],kde=True,ax = axes[0][1],color='green')
sns.histplot(df[df['gender'] =='female']['reading'],kde=True,ax= axes[1][1],color='blue')
sns.histplot(df[df['gender'] =='male']['writing'],kde=True,ax = axes[0][2],color='green')
sns.histplot(df[df['gender'] =='female']['writing'],kde=True,ax = axes[1][2],color='blue')

for i in range(0,3):
    axes[0][i].set_title("Male")
    axes[1][i].set_title("Female")
    
    axes[0][i].set_xlim(0,100)
    axes[1][i].set_xlim(0,100)
plt.show()



/////////////////////GROUP/////////////


sns.countplot(x = 'ethnicity', data = df, palette="mako")
sns.barplot(x = "ethnicity", y = "math", data = df, hue = 'gender')

sns.barplot(x = "ethnicity", y = "reading", data = df, hue = 'gender')

sns.barplot(x = "ethnicity", y = "writing", data = df, hue = 'gender')

df['total'] = (df['math'] + df['reading'] + df['writing']) / 3
fig , axes = plt.subplots(1,4, figsize=(25,8))
sns.barplot(data = df, x='ethnicity', y='math',ax = axes[0],ci=None)
axes[0].set_title("Math")
sns.barplot(data = df, x='ethnicity', y='reading',ax = axes[1],ci=None)
axes[1].set_title("Reading")
sns.barplot(data = df, x='ethnicity', y='writing',ax = axes[2],ci=None)
axes[2].set_title("Writing")
sns.barplot(data = df, x='ethnicity', y='total',ax = axes[3],ci=None)
axes[3].set_title("Total")

for i in range(0,4):
    axes[i].set_ylim(55,75)
plt.show()


/////////////////////Parental level of education////////////////

fig , axes = plt.subplots(1,4, figsize=(25,10),sharey=True)
sns.barplot(data = df, y='parent_education', x='math',ax = axes[0],ci=None)
axes[0].set_title("Math")
sns.barplot(data = df, y='parent_education', x='reading',ax = axes[1],ci=None)
axes[1].set_title("Reading")
sns.barplot(data = df, y='parent_education', x='writing',ax = axes[2],ci=None)
axes[2].set_title("Writing")
sns.barplot(data = df, y='parent_education', x='total',ax = axes[3],ci=None)
axes[3].set_title("Total")
for i in range(0,4):
    axes[i].set_xlim(60,77.5)

plt.show()


///////////////////////Test preparation Course//////////////

plt.figure(figsize=(15,7))
plt.subplot(1, 3, 1)
sns.barplot(x='pre',y='math',data=df,hue='gender')
plt.title('MATH SCORES')
plt.subplot(1, 3, 2)
sns.barplot(x='pre',y='reading',data=df,hue='gender')
plt.title('READING SCORES')
plt.subplot(1, 3, 3)
sns.barplot(x='pre',y='writing',data=df,hue='gender')
plt.title('WRITING SCORES')
plt.show()


df['total'] = (df['math'] + df['reading'] + df['writing']) / 3
plt.figure(figsize=(15,7))
plt.subplot(1, 3, 1)
sns.barplot(x='pre',y='total',data=df,hue='gender')
plt.title('TOTAL')



///////////////// LUNCH///////////////

plt.figure(figsize=(15,7))
plt.subplot(1, 3, 1)
sns.barplot(x='lunch',y='math',data=df,hue='gender')
plt.title('MATH SCORES')
plt.subplot(1, 3, 2)
sns.barplot(x='lunch',y='reading',data=df,hue='gender')
plt.title('READING SCORES')
plt.subplot(1, 3, 3)
sns.barplot(x='lunch',y='writing',data=df,hue='gender')
plt.title('WRITING SCORES')
plt.show()

plt.figure(figsize=(15,7))
plt.subplot(1, 3, 1)
sns.barplot(x='lunch',y='total',data=df,hue='gender')
plt.title('TOTAL')






















